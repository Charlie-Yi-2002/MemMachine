{
  "openapi": "3.0.3",
  "info": {
    "title": "MemMachine API",
    "description": "This API provides endpoints for interacting with the Profile Memory and Episodic Memory components of the MemMachine system. It includes REST APIs for core memory functions and a dedicated set of tools for use by Large Language Models.",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "REST APIs",
      "description": "Core RESTful endpoints for managing and interacting with MemMachine."
    },
    {
      "name": "MCP APIs",
      "description": "API tools specifically designed for use by Large Language Models."
    }
  ],
  "paths": {
    "/add_memory": {
      "post": {
        "tags": [
          "REST APIs"
        ],
        "summary": "Adds a memory episode to both episodic and profile memory.",
        "description": "This endpoint first retrieves the appropriate episodic memory instance based on the session context (group, agent, user, session IDs). It then adds the episode to the episodic memory. If successful, it also passes the message to the profile memory for ingestion.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEpisode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Memory episode added successfully."
          },
          "400": {
            "description": "Invalid producer or produced_for IDs."
          },
          "404": {
            "description": "No matching episodic memory instance found for the provided session context."
          }
        }
      }
    },
    "/search_memory": {
      "post": {
        "tags": [
          "REST APIs"
        ],
        "summary": "Searches for memories across both episodic and profile memory.",
        "description": "Retrieves the relevant episodic memory instance and then performs concurrent searches in both the episodic memory and the profile memory. The results are combined into a single response object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search results retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            }
          },
          "404": {
            "description": "No matching episodic memory instance found for the provided session context."
          }
        }
      }
    },
    "/delete_data": {
      "post": {
        "tags": [
          "REST APIs"
        ],
        "summary": "Delete data for a particular session.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteDataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data deleted successfully."
          },
          "404": {
            "description": "No matching episodic memory instance found for the provided session context."
          }
        }
      }
    },
    "/sessions": {
      "get": {
        "tags": [
          "REST APIs"
        ],
        "summary": "Get all sessions.",
        "responses": {
          "200": {
            "description": "A list of all sessions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSessionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{user_id}": {
      "get": {
        "tags": [
          "REST APIs"
        ],
        "summary": "Get all sessions for a particular user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sessions for the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSessionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{group_id}": {
      "get": {
        "tags": [
          "REST APIs"
        ],
        "summary": "Get all sessions for a particular group.",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sessions for the specified group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSessionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{agent_id}": {
      "get": {
        "tags": [
          "REST APIs"
        ],
        "summary": "Get all sessions for a particular agent.",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sessions for the specified agent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSessionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/llms/add_memmachine": {
      "post": {
        "tags": [
          "MCP APIs"
        ],
        "summary": "Add memory to the memmachine memory system.",
        "description": "This tool is designed to be called by LLMs to add a new memory episode to the system.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "session": {
                    "$ref": "#/components/schemas/SessionData"
                  },
                  "producer": {
                    "type": "string"
                  },
                  "produced_for": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "episode_type": {
                    "type": "string"
                  }
                },
                "required": [
                  "session",
                  "producer",
                  "produced_for",
                  "content",
                  "episode_type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Memory added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid producer or produced_for IDs."
          },
          "404": {
            "description": "No matching episodic memory instance found."
          }
        }
      }
    },
    "/llms/search_memmachine": {
      "post": {
        "tags": [
          "MCP APIs"
        ],
        "summary": "Vector search for a memory in the memmachine memory system.",
        "description": "This tool is designed to be called by LLMs to search for relevant memory context.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "session": {
                    "$ref": "#/components/schemas/SessionData"
                  },
                  "query": {
                    "type": "string"
                  },
                  "limit": {
                    "type": "integer",
                    "nullable": true
                  }
                },
                "required": [
                  "session",
                  "query"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search results, internally separated according to memory source.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "No matching episodic memory instance found."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SessionData": {
        "type": "object",
        "title": "SessionData",
        "properties": {
          "group_id": {
            "type": "string",
            "nullable": true
          },
          "agent_id": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "user_id": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "session_id": {
            "type": "string"
          }
        },
        "required": [
          "session_id"
        ]
      },
      "NewEpisode": {
        "type": "object",
        "title": "NewEpisode",
        "properties": {
          "session": {
            "$ref": "#/components/schemas/SessionData"
          },
          "producer": {
            "type": "string"
          },
          "produced_for": {
            "type": "string"
          },
          "episode_content": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            ]
          },
          "episode_type": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "additionalProperties": true
          }
        },
        "required": [
          "session",
          "producer",
          "produced_for",
          "episode_content",
          "episode_type"
        ]
      },
      "SearchQuery": {
        "type": "object",
        "title": "SearchQuery",
        "properties": {
          "session": {
            "$ref": "#/components/schemas/SessionData"
          },
          "query": {
            "type": "string"
          },
          "filter": {
            "type": "object",
            "nullable": true,
            "additionalProperties": true
          },
          "limit": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "session",
          "query"
        ]
      },
      "SearchResult": {
        "type": "object",
        "title": "SearchResult",
        "properties": {
          "content": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "content"
        ]
      },
      "MemorySession": {
        "type": "object",
        "title": "MemorySession",
        "properties": {
          "user_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "session_id": {
            "type": "string"
          },
          "group_id": {
            "type": "string",
            "nullable": true
          },
          "agent_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "required": [
          "user_ids",
          "session_id"
        ]
      },
      "AllSessionsResponse": {
        "type": "object",
        "title": "AllSessionsResponse",
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemorySession"
            }
          }
        },
        "required": [
          "sessions"
        ]
      },
      "DeleteDataRequest": {
        "type": "object",
        "title": "DeleteDataRequest",
        "properties": {
          "session": {
            "$ref": "#/components/schemas/SessionData"
          }
        },
        "required": [
          "session"
        ]
      }
    }
  }
}
